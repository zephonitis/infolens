{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api';\nclass ApiService {\n  async request(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n  async sendQuery(queryRequest) {\n    return this.request('/query', {\n      method: 'POST',\n      body: JSON.stringify(queryRequest)\n    });\n  }\n  async getConversations(userId) {\n    return this.request(`/conversations?user_id=${userId}`);\n  }\n  async getConversation(conversationId) {\n    return this.request(`/conversations/${conversationId}`);\n  }\n  async createConversation(userId, title) {\n    return this.request('/conversations', {\n      method: 'POST',\n      body: JSON.stringify({\n        user_id: userId,\n        title\n      })\n    });\n  }\n  async saveMessage(conversationId, message) {\n    await this.request(`/conversations/${conversationId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify(message)\n    });\n  }\n}\nexport const apiService = new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","ApiService","request","endpoint","options","url","config","headers","response","fetch","ok","Error","status","json","error","console","sendQuery","queryRequest","method","body","JSON","stringify","getConversations","userId","getConversation","conversationId","createConversation","title","user_id","saveMessage","message","apiService"],"sources":["C:/Users/ashwi/OneDrive/Desktop/LightRiver UI/src/services/api.ts"],"sourcesContent":["import { QueryRequest, QueryResponse, Conversation, Message } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api';\n\nclass ApiService {\n  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config: RequestInit = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  async sendQuery(queryRequest: QueryRequest): Promise<QueryResponse> {\n    return this.request<QueryResponse>('/query', {\n      method: 'POST',\n      body: JSON.stringify(queryRequest),\n    });\n  }\n\n  async getConversations(userId: string): Promise<Conversation[]> {\n    return this.request<Conversation[]>(`/conversations?user_id=${userId}`);\n  }\n\n  async getConversation(conversationId: string): Promise<Conversation> {\n    return this.request<Conversation>(`/conversations/${conversationId}`);\n  }\n\n  async createConversation(userId: string, title: string): Promise<Conversation> {\n    return this.request<Conversation>('/conversations', {\n      method: 'POST',\n      body: JSON.stringify({ user_id: userId, title }),\n    });\n  }\n\n  async saveMessage(conversationId: string, message: Message): Promise<void> {\n    await this.request(`/conversations/${conversationId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify(message),\n    });\n  }\n}\n\nexport const apiService = new ApiService();\n"],"mappings":"AAEA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,2BAA2B;AAEtF,MAAMC,UAAU,CAAC;EACf,MAAcC,OAAOA,CAAIC,QAAgB,EAAEC,OAAoB,GAAG,CAAC,CAAC,EAAc;IAChF,MAAMC,GAAG,GAAG,GAAGR,YAAY,GAAGM,QAAQ,EAAE;IACxC,MAAMG,MAAmB,GAAG;MAC1BC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb,CAAC;MACD,GAAGH;IACL,CAAC;IAED,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAEC,MAAM,CAAC;MAEzC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF;EAEA,MAAME,SAASA,CAACC,YAA0B,EAA0B;IAClE,OAAO,IAAI,CAACf,OAAO,CAAgB,QAAQ,EAAE;MAC3CgB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,YAAY;IACnC,CAAC,CAAC;EACJ;EAEA,MAAMK,gBAAgBA,CAACC,MAAc,EAA2B;IAC9D,OAAO,IAAI,CAACrB,OAAO,CAAiB,0BAA0BqB,MAAM,EAAE,CAAC;EACzE;EAEA,MAAMC,eAAeA,CAACC,cAAsB,EAAyB;IACnE,OAAO,IAAI,CAACvB,OAAO,CAAe,kBAAkBuB,cAAc,EAAE,CAAC;EACvE;EAEA,MAAMC,kBAAkBA,CAACH,MAAc,EAAEI,KAAa,EAAyB;IAC7E,OAAO,IAAI,CAACzB,OAAO,CAAe,gBAAgB,EAAE;MAClDgB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEO,OAAO,EAAEL,MAAM;QAAEI;MAAM,CAAC;IACjD,CAAC,CAAC;EACJ;EAEA,MAAME,WAAWA,CAACJ,cAAsB,EAAEK,OAAgB,EAAiB;IACzE,MAAM,IAAI,CAAC5B,OAAO,CAAC,kBAAkBuB,cAAc,WAAW,EAAE;MAC9DP,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACS,OAAO;IAC9B,CAAC,CAAC;EACJ;AACF;AAEA,OAAO,MAAMC,UAAU,GAAG,IAAI9B,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}