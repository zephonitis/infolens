{"ast":null,"code":"// packages/react/use-callback-ref/src/use-callback-ref.tsx\nimport * as React from \"react\";\nfunction useCallbackRef(callback) {\n  const callbackRef = React.useRef(callback);\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n  return React.useMemo(() => (...args) => callbackRef.current?.(...args), []);\n}\nexport { useCallbackRef };","map":{"version":3,"names":["React","useCallbackRef","callback","callbackRef","useRef","useEffect","current","useMemo","args"],"sources":["C:\\Users\\ashwi\\OneDrive\\Desktop\\LightRiver UI\\node_modules\\@radix-ui\\react-use-callback-ref\\src\\use-callback-ref.tsx"],"sourcesContent":["import * as React from 'react';\n\n/**\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\n * prop or avoid re-executing effects when passed as a dependency\n */\nfunction useCallbackRef<T extends (...args: any[]) => any>(callback: T | undefined): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  // https://github.com/facebook/react/issues/19240\n  return React.useMemo(() => ((...args) => callbackRef.current?.(...args)) as T, []);\n}\n\nexport { useCallbackRef };\n"],"mappings":";AAAA,YAAYA,KAAA,MAAW;AAMvB,SAASC,eAAkDC,QAAA,EAA4B;EACrF,MAAMC,WAAA,GAAoBH,KAAA,CAAAI,MAAA,CAAOF,QAAQ;EAEnCF,KAAA,CAAAK,SAAA,CAAU,MAAM;IACpBF,WAAA,CAAYG,OAAA,GAAUJ,QAAA;EACxB,CAAC;EAGD,OAAaF,KAAA,CAAAO,OAAA,CAAQ,MAAO,IAAIC,IAAA,KAASL,WAAA,CAAYG,OAAA,GAAU,GAAGE,IAAI,GAAS,EAAE;AACnF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}