{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { apiService } from '../services/api';\nimport { v4 as uuidv4 } from 'uuid';\nexport const useConversations = userId => {\n  _s();\n  const [conversations, setConversations] = useState([]);\n  const [activeConversationId, setActiveConversationId] = useState();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const activeConversation = conversations.find(c => c.id === activeConversationId);\n  useEffect(() => {\n    loadConversations();\n  }, [userId]);\n  const loadConversations = async () => {\n    try {\n      setLoading(true);\n      const data = await apiService.getConversations(userId);\n      setConversations(data);\n      if (data.length > 0 && !activeConversationId) {\n        setActiveConversationId(data[0].id);\n      }\n    } catch (err) {\n      setError('Failed to load conversations');\n      console.error('Error loading conversations:', err);\n      // For demo purposes, create a mock conversation\n      setConversations([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const createNewConversation = async title => {\n    try {\n      const newTitle = title || `New Conversation ${new Date().toLocaleString()}`;\n\n      // For demo purposes, create locally without API call\n      const newConversation = {\n        id: uuidv4(),\n        title: newTitle,\n        messages: [],\n        created_at: new Date(),\n        updated_at: new Date()\n      };\n      setConversations(prev => [newConversation, ...prev]);\n      setActiveConversationId(newConversation.id);\n      return newConversation;\n    } catch (err) {\n      setError('Failed to create conversation');\n      console.error('Error creating conversation:', err);\n      throw err;\n    }\n  };\n  const updateConversation = updatedConversation => {\n    setConversations(prev => prev.map(c => c.id === updatedConversation.id ? updatedConversation : c));\n  };\n  const selectConversation = conversationId => {\n    setActiveConversationId(conversationId);\n  };\n  const deleteConversation = conversationId => {\n    setConversations(prev => prev.filter(c => c.id !== conversationId));\n    if (activeConversationId === conversationId) {\n      const remaining = conversations.filter(c => c.id !== conversationId);\n      setActiveConversationId(remaining.length > 0 ? remaining[0].id : undefined);\n    }\n  };\n  return {\n    conversations,\n    activeConversation,\n    activeConversationId,\n    loading,\n    error,\n    createNewConversation,\n    updateConversation,\n    selectConversation,\n    deleteConversation,\n    refreshConversations: loadConversations\n  };\n};\n_s(useConversations, \"PEv1uI6dnNj/BRv5SX/ELrkjI6w=\");","map":{"version":3,"names":["useState","useEffect","apiService","v4","uuidv4","useConversations","userId","_s","conversations","setConversations","activeConversationId","setActiveConversationId","loading","setLoading","error","setError","activeConversation","find","c","id","loadConversations","data","getConversations","length","err","console","createNewConversation","title","newTitle","Date","toLocaleString","newConversation","messages","created_at","updated_at","prev","updateConversation","updatedConversation","map","selectConversation","conversationId","deleteConversation","filter","remaining","undefined","refreshConversations"],"sources":["C:/Users/ashwi/OneDrive/Desktop/LightRiver UI/src/hooks/useConversations.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Conversation } from '../types';\nimport { apiService } from '../services/api';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const useConversations = (userId: string) => {\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [activeConversationId, setActiveConversationId] = useState<string | undefined>();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const activeConversation = conversations.find(c => c.id === activeConversationId);\n\n  useEffect(() => {\n    loadConversations();\n  }, [userId]);\n\n  const loadConversations = async () => {\n    try {\n      setLoading(true);\n      const data = await apiService.getConversations(userId);\n      setConversations(data);\n      if (data.length > 0 && !activeConversationId) {\n        setActiveConversationId(data[0].id);\n      }\n    } catch (err) {\n      setError('Failed to load conversations');\n      console.error('Error loading conversations:', err);\n      // For demo purposes, create a mock conversation\n      setConversations([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createNewConversation = async (title?: string) => {\n    try {\n      const newTitle = title || `New Conversation ${new Date().toLocaleString()}`;\n      \n      // For demo purposes, create locally without API call\n      const newConversation: Conversation = {\n        id: uuidv4(),\n        title: newTitle,\n        messages: [],\n        created_at: new Date(),\n        updated_at: new Date(),\n      };\n\n      setConversations(prev => [newConversation, ...prev]);\n      setActiveConversationId(newConversation.id);\n      \n      return newConversation;\n    } catch (err) {\n      setError('Failed to create conversation');\n      console.error('Error creating conversation:', err);\n      throw err;\n    }\n  };\n\n  const updateConversation = (updatedConversation: Conversation) => {\n    setConversations(prev => \n      prev.map(c => \n        c.id === updatedConversation.id ? updatedConversation : c\n      )\n    );\n  };\n\n  const selectConversation = (conversationId: string) => {\n    setActiveConversationId(conversationId);\n  };\n\n  const deleteConversation = (conversationId: string) => {\n    setConversations(prev => prev.filter(c => c.id !== conversationId));\n    if (activeConversationId === conversationId) {\n      const remaining = conversations.filter(c => c.id !== conversationId);\n      setActiveConversationId(remaining.length > 0 ? remaining[0].id : undefined);\n    }\n  };\n\n  return {\n    conversations,\n    activeConversation,\n    activeConversationId,\n    loading,\n    error,\n    createNewConversation,\n    updateConversation,\n    selectConversation,\n    deleteConversation,\n    refreshConversations: loadConversations,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}