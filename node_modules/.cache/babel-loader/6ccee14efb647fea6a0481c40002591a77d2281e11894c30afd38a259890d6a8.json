{"ast":null,"code":"\"use client\";\n\n// src/scroll-area.tsx\nimport _objectSpread from \"C:/Users/ashwi/OneDrive/Desktop/LightRiver UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/ashwi/OneDrive/Desktop/LightRiver UI/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"__scopeScrollArea\", \"type\", \"dir\", \"scrollHideDelay\"],\n  _excluded2 = [\"__scopeScrollArea\", \"children\", \"nonce\"],\n  _excluded3 = [\"forceMount\"],\n  _excluded4 = [\"forceMount\"],\n  _excluded5 = [\"forceMount\"],\n  _excluded6 = [\"forceMount\"],\n  _excluded7 = [\"orientation\"],\n  _excluded8 = [\"sizes\", \"onSizesChange\"],\n  _excluded9 = [\"sizes\", \"onSizesChange\"],\n  _excluded0 = [\"__scopeScrollArea\", \"sizes\", \"hasThumb\", \"onThumbChange\", \"onThumbPointerUp\", \"onThumbPointerDown\", \"onThumbPositionChange\", \"onDragScroll\", \"onWheelScroll\", \"onResize\"],\n  _excluded1 = [\"forceMount\"],\n  _excluded10 = [\"__scopeScrollArea\", \"style\"],\n  _excluded11 = [\"__scopeScrollArea\"];\nimport * as React2 from \"react\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nimport { useDirection } from \"@radix-ui/react-direction\";\nimport { useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\nimport { clamp } from \"@radix-ui/number\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\n\n// src/use-state-machine.ts\nimport * as React from \"react\";\nfunction useStateMachine(initialState, machine) {\n  return React.useReducer((state, event) => {\n    const nextState = machine[state][event];\n    return nextState !== null && nextState !== void 0 ? nextState : state;\n  }, initialState);\n}\n\n// src/scroll-area.tsx\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar SCROLL_AREA_NAME = \"ScrollArea\";\nvar [createScrollAreaContext, createScrollAreaScope] = createContextScope(SCROLL_AREA_NAME);\nvar [ScrollAreaProvider, useScrollAreaContext] = createScrollAreaContext(SCROLL_AREA_NAME);\nvar ScrollArea = React2.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeScrollArea,\n      type = \"hover\",\n      dir,\n      scrollHideDelay = 600\n    } = props,\n    scrollAreaProps = _objectWithoutProperties(props, _excluded);\n  const [scrollArea, setScrollArea] = React2.useState(null);\n  const [viewport, setViewport] = React2.useState(null);\n  const [content, setContent] = React2.useState(null);\n  const [scrollbarX, setScrollbarX] = React2.useState(null);\n  const [scrollbarY, setScrollbarY] = React2.useState(null);\n  const [cornerWidth, setCornerWidth] = React2.useState(0);\n  const [cornerHeight, setCornerHeight] = React2.useState(0);\n  const [scrollbarXEnabled, setScrollbarXEnabled] = React2.useState(false);\n  const [scrollbarYEnabled, setScrollbarYEnabled] = React2.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, node => setScrollArea(node));\n  const direction = useDirection(dir);\n  return /* @__PURE__ */jsx(ScrollAreaProvider, {\n    scope: __scopeScrollArea,\n    type,\n    dir: direction,\n    scrollHideDelay,\n    scrollArea,\n    viewport,\n    onViewportChange: setViewport,\n    content,\n    onContentChange: setContent,\n    scrollbarX,\n    onScrollbarXChange: setScrollbarX,\n    scrollbarXEnabled,\n    onScrollbarXEnabledChange: setScrollbarXEnabled,\n    scrollbarY,\n    onScrollbarYChange: setScrollbarY,\n    scrollbarYEnabled,\n    onScrollbarYEnabledChange: setScrollbarYEnabled,\n    onCornerWidthChange: setCornerWidth,\n    onCornerHeightChange: setCornerHeight,\n    children: /* @__PURE__ */jsx(Primitive.div, _objectSpread(_objectSpread({\n      dir: direction\n    }, scrollAreaProps), {}, {\n      ref: composedRefs,\n      style: _objectSpread({\n        position: \"relative\",\n        // Pass corner sizes as CSS vars to reduce re-renders of context consumers\n        [\"--radix-scroll-area-corner-width\"]: cornerWidth + \"px\",\n        [\"--radix-scroll-area-corner-height\"]: cornerHeight + \"px\"\n      }, props.style)\n    }))\n  });\n});\nScrollArea.displayName = SCROLL_AREA_NAME;\nvar VIEWPORT_NAME = \"ScrollAreaViewport\";\nvar ScrollAreaViewport = React2.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeScrollArea,\n      children,\n      nonce\n    } = props,\n    viewportProps = _objectWithoutProperties(props, _excluded2);\n  const context = useScrollAreaContext(VIEWPORT_NAME, __scopeScrollArea);\n  const ref = React2.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(\"style\", {\n      dangerouslySetInnerHTML: {\n        __html: \"[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}\"\n      },\n      nonce\n    }), /* @__PURE__ */jsx(Primitive.div, _objectSpread(_objectSpread({\n      \"data-radix-scroll-area-viewport\": \"\"\n    }, viewportProps), {}, {\n      ref: composedRefs,\n      style: _objectSpread({\n        /**\n         * We don't support `visible` because the intention is to have at least one scrollbar\n         * if this component is used and `visible` will behave like `auto` in that case\n         * https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#description\n         *\n         * We don't handle `auto` because the intention is for the native implementation\n         * to be hidden if using this component. We just want to ensure the node is scrollable\n         * so could have used either `scroll` or `auto` here. We picked `scroll` to prevent\n         * the browser from having to work out whether to render native scrollbars or not,\n         * we tell it to with the intention of hiding them in CSS.\n         */\n        overflowX: context.scrollbarXEnabled ? \"scroll\" : \"hidden\",\n        overflowY: context.scrollbarYEnabled ? \"scroll\" : \"hidden\"\n      }, props.style),\n      children: /* @__PURE__ */jsx(\"div\", {\n        ref: context.onContentChange,\n        style: {\n          minWidth: \"100%\",\n          display: \"table\"\n        },\n        children\n      })\n    }))]\n  });\n});\nScrollAreaViewport.displayName = VIEWPORT_NAME;\nvar SCROLLBAR_NAME = \"ScrollAreaScrollbar\";\nvar ScrollAreaScrollbar = React2.forwardRef((props, forwardedRef) => {\n  const {\n      forceMount\n    } = props,\n    scrollbarProps = _objectWithoutProperties(props, _excluded3);\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const {\n    onScrollbarXEnabledChange,\n    onScrollbarYEnabledChange\n  } = context;\n  const isHorizontal = props.orientation === \"horizontal\";\n  React2.useEffect(() => {\n    isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);\n    return () => {\n      isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);\n    };\n  }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);\n  return context.type === \"hover\" ? /* @__PURE__ */jsx(ScrollAreaScrollbarHover, _objectSpread(_objectSpread({}, scrollbarProps), {}, {\n    ref: forwardedRef,\n    forceMount\n  })) : context.type === \"scroll\" ? /* @__PURE__ */jsx(ScrollAreaScrollbarScroll, _objectSpread(_objectSpread({}, scrollbarProps), {}, {\n    ref: forwardedRef,\n    forceMount\n  })) : context.type === \"auto\" ? /* @__PURE__ */jsx(ScrollAreaScrollbarAuto, _objectSpread(_objectSpread({}, scrollbarProps), {}, {\n    ref: forwardedRef,\n    forceMount\n  })) : context.type === \"always\" ? /* @__PURE__ */jsx(ScrollAreaScrollbarVisible, _objectSpread(_objectSpread({}, scrollbarProps), {}, {\n    ref: forwardedRef\n  })) : null;\n});\nScrollAreaScrollbar.displayName = SCROLLBAR_NAME;\nvar ScrollAreaScrollbarHover = React2.forwardRef((props, forwardedRef) => {\n  const {\n      forceMount\n    } = props,\n    scrollbarProps = _objectWithoutProperties(props, _excluded4);\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [visible, setVisible] = React2.useState(false);\n  React2.useEffect(() => {\n    const scrollArea = context.scrollArea;\n    let hideTimer = 0;\n    if (scrollArea) {\n      const handlePointerEnter = () => {\n        window.clearTimeout(hideTimer);\n        setVisible(true);\n      };\n      const handlePointerLeave = () => {\n        hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);\n      };\n      scrollArea.addEventListener(\"pointerenter\", handlePointerEnter);\n      scrollArea.addEventListener(\"pointerleave\", handlePointerLeave);\n      return () => {\n        window.clearTimeout(hideTimer);\n        scrollArea.removeEventListener(\"pointerenter\", handlePointerEnter);\n        scrollArea.removeEventListener(\"pointerleave\", handlePointerLeave);\n      };\n    }\n  }, [context.scrollArea, context.scrollHideDelay]);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || visible,\n    children: /* @__PURE__ */jsx(ScrollAreaScrollbarAuto, _objectSpread(_objectSpread({\n      \"data-state\": visible ? \"visible\" : \"hidden\"\n    }, scrollbarProps), {}, {\n      ref: forwardedRef\n    }))\n  });\n});\nvar ScrollAreaScrollbarScroll = React2.forwardRef((props, forwardedRef) => {\n  const {\n      forceMount\n    } = props,\n    scrollbarProps = _objectWithoutProperties(props, _excluded5);\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const isHorizontal = props.orientation === \"horizontal\";\n  const debounceScrollEnd = useDebounceCallback(() => send(\"SCROLL_END\"), 100);\n  const [state, send] = useStateMachine(\"hidden\", {\n    hidden: {\n      SCROLL: \"scrolling\"\n    },\n    scrolling: {\n      SCROLL_END: \"idle\",\n      POINTER_ENTER: \"interacting\"\n    },\n    interacting: {\n      SCROLL: \"interacting\",\n      POINTER_LEAVE: \"idle\"\n    },\n    idle: {\n      HIDE: \"hidden\",\n      SCROLL: \"scrolling\",\n      POINTER_ENTER: \"interacting\"\n    }\n  });\n  React2.useEffect(() => {\n    if (state === \"idle\") {\n      const hideTimer = window.setTimeout(() => send(\"HIDE\"), context.scrollHideDelay);\n      return () => window.clearTimeout(hideTimer);\n    }\n  }, [state, context.scrollHideDelay, send]);\n  React2.useEffect(() => {\n    const viewport = context.viewport;\n    const scrollDirection = isHorizontal ? \"scrollLeft\" : \"scrollTop\";\n    if (viewport) {\n      let prevScrollPos = viewport[scrollDirection];\n      const handleScroll = () => {\n        const scrollPos = viewport[scrollDirection];\n        const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;\n        if (hasScrollInDirectionChanged) {\n          send(\"SCROLL\");\n          debounceScrollEnd();\n        }\n        prevScrollPos = scrollPos;\n      };\n      viewport.addEventListener(\"scroll\", handleScroll);\n      return () => viewport.removeEventListener(\"scroll\", handleScroll);\n    }\n  }, [context.viewport, isHorizontal, send, debounceScrollEnd]);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || state !== \"hidden\",\n    children: /* @__PURE__ */jsx(ScrollAreaScrollbarVisible, _objectSpread(_objectSpread({\n      \"data-state\": state === \"hidden\" ? \"hidden\" : \"visible\"\n    }, scrollbarProps), {}, {\n      ref: forwardedRef,\n      onPointerEnter: composeEventHandlers(props.onPointerEnter, () => send(\"POINTER_ENTER\")),\n      onPointerLeave: composeEventHandlers(props.onPointerLeave, () => send(\"POINTER_LEAVE\"))\n    }))\n  });\n});\nvar ScrollAreaScrollbarAuto = React2.forwardRef((props, forwardedRef) => {\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const {\n      forceMount\n    } = props,\n    scrollbarProps = _objectWithoutProperties(props, _excluded6);\n  const [visible, setVisible] = React2.useState(false);\n  const isHorizontal = props.orientation === \"horizontal\";\n  const handleResize = useDebounceCallback(() => {\n    if (context.viewport) {\n      const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;\n      const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;\n      setVisible(isHorizontal ? isOverflowX : isOverflowY);\n    }\n  }, 10);\n  useResizeObserver(context.viewport, handleResize);\n  useResizeObserver(context.content, handleResize);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || visible,\n    children: /* @__PURE__ */jsx(ScrollAreaScrollbarVisible, _objectSpread(_objectSpread({\n      \"data-state\": visible ? \"visible\" : \"hidden\"\n    }, scrollbarProps), {}, {\n      ref: forwardedRef\n    }))\n  });\n});\nvar ScrollAreaScrollbarVisible = React2.forwardRef((props, forwardedRef) => {\n  const {\n      orientation = \"vertical\"\n    } = props,\n    scrollbarProps = _objectWithoutProperties(props, _excluded7);\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const thumbRef = React2.useRef(null);\n  const pointerOffsetRef = React2.useRef(0);\n  const [sizes, setSizes] = React2.useState({\n    content: 0,\n    viewport: 0,\n    scrollbar: {\n      size: 0,\n      paddingStart: 0,\n      paddingEnd: 0\n    }\n  });\n  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);\n  const commonProps = _objectSpread(_objectSpread({}, scrollbarProps), {}, {\n    sizes,\n    onSizesChange: setSizes,\n    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),\n    onThumbChange: thumb => thumbRef.current = thumb,\n    onThumbPointerUp: () => pointerOffsetRef.current = 0,\n    onThumbPointerDown: pointerPos => pointerOffsetRef.current = pointerPos\n  });\n  function getScrollPosition(pointerPos, dir) {\n    return getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, dir);\n  }\n  if (orientation === \"horizontal\") {\n    return /* @__PURE__ */jsx(ScrollAreaScrollbarX, _objectSpread(_objectSpread({}, commonProps), {}, {\n      ref: forwardedRef,\n      onThumbPositionChange: () => {\n        if (context.viewport && thumbRef.current) {\n          const scrollPos = context.viewport.scrollLeft;\n          const offset = getThumbOffsetFromScroll(scrollPos, sizes, context.dir);\n          thumbRef.current.style.transform = \"translate3d(\".concat(offset, \"px, 0, 0)\");\n        }\n      },\n      onWheelScroll: scrollPos => {\n        if (context.viewport) context.viewport.scrollLeft = scrollPos;\n      },\n      onDragScroll: pointerPos => {\n        if (context.viewport) {\n          context.viewport.scrollLeft = getScrollPosition(pointerPos, context.dir);\n        }\n      }\n    }));\n  }\n  if (orientation === \"vertical\") {\n    return /* @__PURE__ */jsx(ScrollAreaScrollbarY, _objectSpread(_objectSpread({}, commonProps), {}, {\n      ref: forwardedRef,\n      onThumbPositionChange: () => {\n        if (context.viewport && thumbRef.current) {\n          const scrollPos = context.viewport.scrollTop;\n          const offset = getThumbOffsetFromScroll(scrollPos, sizes);\n          thumbRef.current.style.transform = \"translate3d(0, \".concat(offset, \"px, 0)\");\n        }\n      },\n      onWheelScroll: scrollPos => {\n        if (context.viewport) context.viewport.scrollTop = scrollPos;\n      },\n      onDragScroll: pointerPos => {\n        if (context.viewport) context.viewport.scrollTop = getScrollPosition(pointerPos);\n      }\n    }));\n  }\n  return null;\n});\nvar ScrollAreaScrollbarX = React2.forwardRef((props, forwardedRef) => {\n  const {\n      sizes,\n      onSizesChange\n    } = props,\n    scrollbarProps = _objectWithoutProperties(props, _excluded8);\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React2.useState();\n  const ref = React2.useRef(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarXChange);\n  React2.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n  return /* @__PURE__ */jsx(ScrollAreaScrollbarImpl, _objectSpread(_objectSpread({\n    \"data-orientation\": \"horizontal\"\n  }, scrollbarProps), {}, {\n    ref: composeRefs,\n    sizes,\n    style: _objectSpread({\n      bottom: 0,\n      left: context.dir === \"rtl\" ? \"var(--radix-scroll-area-corner-width)\" : 0,\n      right: context.dir === \"ltr\" ? \"var(--radix-scroll-area-corner-width)\" : 0,\n      [\"--radix-scroll-area-thumb-width\"]: getThumbSize(sizes) + \"px\"\n    }, props.style),\n    onThumbPointerDown: pointerPos => props.onThumbPointerDown(pointerPos.x),\n    onDragScroll: pointerPos => props.onDragScroll(pointerPos.x),\n    onWheelScroll: (event, maxScrollPos) => {\n      if (context.viewport) {\n        const scrollPos = context.viewport.scrollLeft + event.deltaX;\n        props.onWheelScroll(scrollPos);\n        if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n          event.preventDefault();\n        }\n      }\n    },\n    onResize: () => {\n      if (ref.current && context.viewport && computedStyle) {\n        onSizesChange({\n          content: context.viewport.scrollWidth,\n          viewport: context.viewport.offsetWidth,\n          scrollbar: {\n            size: ref.current.clientWidth,\n            paddingStart: toInt(computedStyle.paddingLeft),\n            paddingEnd: toInt(computedStyle.paddingRight)\n          }\n        });\n      }\n    }\n  }));\n});\nvar ScrollAreaScrollbarY = React2.forwardRef((props, forwardedRef) => {\n  const {\n      sizes,\n      onSizesChange\n    } = props,\n    scrollbarProps = _objectWithoutProperties(props, _excluded9);\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React2.useState();\n  const ref = React2.useRef(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarYChange);\n  React2.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n  return /* @__PURE__ */jsx(ScrollAreaScrollbarImpl, _objectSpread(_objectSpread({\n    \"data-orientation\": \"vertical\"\n  }, scrollbarProps), {}, {\n    ref: composeRefs,\n    sizes,\n    style: _objectSpread({\n      top: 0,\n      right: context.dir === \"ltr\" ? 0 : void 0,\n      left: context.dir === \"rtl\" ? 0 : void 0,\n      bottom: \"var(--radix-scroll-area-corner-height)\",\n      [\"--radix-scroll-area-thumb-height\"]: getThumbSize(sizes) + \"px\"\n    }, props.style),\n    onThumbPointerDown: pointerPos => props.onThumbPointerDown(pointerPos.y),\n    onDragScroll: pointerPos => props.onDragScroll(pointerPos.y),\n    onWheelScroll: (event, maxScrollPos) => {\n      if (context.viewport) {\n        const scrollPos = context.viewport.scrollTop + event.deltaY;\n        props.onWheelScroll(scrollPos);\n        if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n          event.preventDefault();\n        }\n      }\n    },\n    onResize: () => {\n      if (ref.current && context.viewport && computedStyle) {\n        onSizesChange({\n          content: context.viewport.scrollHeight,\n          viewport: context.viewport.offsetHeight,\n          scrollbar: {\n            size: ref.current.clientHeight,\n            paddingStart: toInt(computedStyle.paddingTop),\n            paddingEnd: toInt(computedStyle.paddingBottom)\n          }\n        });\n      }\n    }\n  }));\n});\nvar [ScrollbarProvider, useScrollbarContext] = createScrollAreaContext(SCROLLBAR_NAME);\nvar ScrollAreaScrollbarImpl = React2.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeScrollArea,\n      sizes,\n      hasThumb,\n      onThumbChange,\n      onThumbPointerUp,\n      onThumbPointerDown,\n      onThumbPositionChange,\n      onDragScroll,\n      onWheelScroll,\n      onResize\n    } = props,\n    scrollbarProps = _objectWithoutProperties(props, _excluded0);\n  const context = useScrollAreaContext(SCROLLBAR_NAME, __scopeScrollArea);\n  const [scrollbar, setScrollbar] = React2.useState(null);\n  const composeRefs = useComposedRefs(forwardedRef, node => setScrollbar(node));\n  const rectRef = React2.useRef(null);\n  const prevWebkitUserSelectRef = React2.useRef(\"\");\n  const viewport = context.viewport;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = useCallbackRef(onWheelScroll);\n  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);\n  const handleResize = useDebounceCallback(onResize, 10);\n  function handleDragScroll(event) {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({\n        x,\n        y\n      });\n    }\n  }\n  React2.useEffect(() => {\n    const handleWheel = event => {\n      const element = event.target;\n      const isScrollbarWheel = scrollbar === null || scrollbar === void 0 ? void 0 : scrollbar.contains(element);\n      if (isScrollbarWheel) handleWheelScroll(event, maxScrollPos);\n    };\n    document.addEventListener(\"wheel\", handleWheel, {\n      passive: false\n    });\n    return () => document.removeEventListener(\"wheel\", handleWheel, {\n      passive: false\n    });\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n  React2.useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n  useResizeObserver(scrollbar, handleResize);\n  useResizeObserver(context.content, handleResize);\n  return /* @__PURE__ */jsx(ScrollbarProvider, {\n    scope: __scopeScrollArea,\n    scrollbar,\n    hasThumb,\n    onThumbChange: useCallbackRef(onThumbChange),\n    onThumbPointerUp: useCallbackRef(onThumbPointerUp),\n    onThumbPositionChange: handleThumbPositionChange,\n    onThumbPointerDown: useCallbackRef(onThumbPointerDown),\n    children: /* @__PURE__ */jsx(Primitive.div, _objectSpread(_objectSpread({}, scrollbarProps), {}, {\n      ref: composeRefs,\n      style: _objectSpread({\n        position: \"absolute\"\n      }, scrollbarProps.style),\n      onPointerDown: composeEventHandlers(props.onPointerDown, event => {\n        const mainPointer = 0;\n        if (event.button === mainPointer) {\n          const element = event.target;\n          element.setPointerCapture(event.pointerId);\n          rectRef.current = scrollbar.getBoundingClientRect();\n          prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n          document.body.style.webkitUserSelect = \"none\";\n          if (context.viewport) context.viewport.style.scrollBehavior = \"auto\";\n          handleDragScroll(event);\n        }\n      }),\n      onPointerMove: composeEventHandlers(props.onPointerMove, handleDragScroll),\n      onPointerUp: composeEventHandlers(props.onPointerUp, event => {\n        const element = event.target;\n        if (element.hasPointerCapture(event.pointerId)) {\n          element.releasePointerCapture(event.pointerId);\n        }\n        document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n        if (context.viewport) context.viewport.style.scrollBehavior = \"\";\n        rectRef.current = null;\n      })\n    }))\n  });\n});\nvar THUMB_NAME = \"ScrollAreaThumb\";\nvar ScrollAreaThumb = React2.forwardRef((props, forwardedRef) => {\n  const {\n      forceMount\n    } = props,\n    thumbProps = _objectWithoutProperties(props, _excluded1);\n  const scrollbarContext = useScrollbarContext(THUMB_NAME, props.__scopeScrollArea);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || scrollbarContext.hasThumb,\n    children: /* @__PURE__ */jsx(ScrollAreaThumbImpl, _objectSpread({\n      ref: forwardedRef\n    }, thumbProps))\n  });\n});\nvar ScrollAreaThumbImpl = React2.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeScrollArea,\n      style\n    } = props,\n    thumbProps = _objectWithoutProperties(props, _excluded10);\n  const scrollAreaContext = useScrollAreaContext(THUMB_NAME, __scopeScrollArea);\n  const scrollbarContext = useScrollbarContext(THUMB_NAME, __scopeScrollArea);\n  const {\n    onThumbPositionChange\n  } = scrollbarContext;\n  const composedRef = useComposedRefs(forwardedRef, node => scrollbarContext.onThumbChange(node));\n  const removeUnlinkedScrollListenerRef = React2.useRef(void 0);\n  const debounceScrollEnd = useDebounceCallback(() => {\n    if (removeUnlinkedScrollListenerRef.current) {\n      removeUnlinkedScrollListenerRef.current();\n      removeUnlinkedScrollListenerRef.current = void 0;\n    }\n  }, 100);\n  React2.useEffect(() => {\n    const viewport = scrollAreaContext.viewport;\n    if (viewport) {\n      const handleScroll = () => {\n        debounceScrollEnd();\n        if (!removeUnlinkedScrollListenerRef.current) {\n          const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);\n          removeUnlinkedScrollListenerRef.current = listener;\n          onThumbPositionChange();\n        }\n      };\n      onThumbPositionChange();\n      viewport.addEventListener(\"scroll\", handleScroll);\n      return () => viewport.removeEventListener(\"scroll\", handleScroll);\n    }\n  }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);\n  return /* @__PURE__ */jsx(Primitive.div, _objectSpread(_objectSpread({\n    \"data-state\": scrollbarContext.hasThumb ? \"visible\" : \"hidden\"\n  }, thumbProps), {}, {\n    ref: composedRef,\n    style: _objectSpread({\n      width: \"var(--radix-scroll-area-thumb-width)\",\n      height: \"var(--radix-scroll-area-thumb-height)\"\n    }, style),\n    onPointerDownCapture: composeEventHandlers(props.onPointerDownCapture, event => {\n      const thumb = event.target;\n      const thumbRect = thumb.getBoundingClientRect();\n      const x = event.clientX - thumbRect.left;\n      const y = event.clientY - thumbRect.top;\n      scrollbarContext.onThumbPointerDown({\n        x,\n        y\n      });\n    }),\n    onPointerUp: composeEventHandlers(props.onPointerUp, scrollbarContext.onThumbPointerUp)\n  }));\n});\nScrollAreaThumb.displayName = THUMB_NAME;\nvar CORNER_NAME = \"ScrollAreaCorner\";\nvar ScrollAreaCorner = React2.forwardRef((props, forwardedRef) => {\n  const context = useScrollAreaContext(CORNER_NAME, props.__scopeScrollArea);\n  const hasBothScrollbarsVisible = Boolean(context.scrollbarX && context.scrollbarY);\n  const hasCorner = context.type !== \"scroll\" && hasBothScrollbarsVisible;\n  return hasCorner ? /* @__PURE__ */jsx(ScrollAreaCornerImpl, _objectSpread(_objectSpread({}, props), {}, {\n    ref: forwardedRef\n  })) : null;\n});\nScrollAreaCorner.displayName = CORNER_NAME;\nvar ScrollAreaCornerImpl = React2.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeScrollArea\n    } = props,\n    cornerProps = _objectWithoutProperties(props, _excluded11);\n  const context = useScrollAreaContext(CORNER_NAME, __scopeScrollArea);\n  const [width, setWidth] = React2.useState(0);\n  const [height, setHeight] = React2.useState(0);\n  const hasSize = Boolean(width && height);\n  useResizeObserver(context.scrollbarX, () => {\n    var _context$scrollbarX;\n    const height2 = ((_context$scrollbarX = context.scrollbarX) === null || _context$scrollbarX === void 0 ? void 0 : _context$scrollbarX.offsetHeight) || 0;\n    context.onCornerHeightChange(height2);\n    setHeight(height2);\n  });\n  useResizeObserver(context.scrollbarY, () => {\n    var _context$scrollbarY;\n    const width2 = ((_context$scrollbarY = context.scrollbarY) === null || _context$scrollbarY === void 0 ? void 0 : _context$scrollbarY.offsetWidth) || 0;\n    context.onCornerWidthChange(width2);\n    setWidth(width2);\n  });\n  return hasSize ? /* @__PURE__ */jsx(Primitive.div, _objectSpread(_objectSpread({}, cornerProps), {}, {\n    ref: forwardedRef,\n    style: _objectSpread({\n      width,\n      height,\n      position: \"absolute\",\n      right: context.dir === \"ltr\" ? 0 : void 0,\n      left: context.dir === \"rtl\" ? 0 : void 0,\n      bottom: 0\n    }, props.style)\n  })) : null;\n});\nfunction toInt(value) {\n  return value ? parseInt(value, 10) : 0;\n}\nfunction getThumbRatio(viewportSize, contentSize) {\n  const ratio = viewportSize / contentSize;\n  return isNaN(ratio) ? 0 : ratio;\n}\nfunction getThumbSize(sizes) {\n  const ratio = getThumbRatio(sizes.viewport, sizes.content);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const thumbSize = (sizes.scrollbar.size - scrollbarPadding) * ratio;\n  return Math.max(thumbSize, 18);\n}\nfunction getScrollPositionFromPointer(pointerPos, pointerOffset, sizes) {\n  let dir = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"ltr\";\n  const thumbSizePx = getThumbSize(sizes);\n  const thumbCenter = thumbSizePx / 2;\n  const offset = pointerOffset || thumbCenter;\n  const thumbOffsetFromEnd = thumbSizePx - offset;\n  const minPointerPos = sizes.scrollbar.paddingStart + offset;\n  const maxPointerPos = sizes.scrollbar.size - sizes.scrollbar.paddingEnd - thumbOffsetFromEnd;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const scrollRange = dir === \"ltr\" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange);\n  return interpolate(pointerPos);\n}\nfunction getThumbOffsetFromScroll(scrollPos, sizes) {\n  let dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"ltr\";\n  const thumbSizePx = getThumbSize(sizes);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const scrollbar = sizes.scrollbar.size - scrollbarPadding;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const maxThumbPos = scrollbar - thumbSizePx;\n  const scrollClampRange = dir === \"ltr\" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const scrollWithoutMomentum = clamp(scrollPos, scrollClampRange);\n  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);\n  return interpolate(scrollWithoutMomentum);\n}\nfunction linearScale(input, output) {\n  return value => {\n    if (input[0] === input[1] || output[0] === output[1]) return output[0];\n    const ratio = (output[1] - output[0]) / (input[1] - input[0]);\n    return output[0] + ratio * (value - input[0]);\n  };\n}\nfunction isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos) {\n  return scrollPos > 0 && scrollPos < maxScrollPos;\n}\nvar addUnlinkedScrollListener = function (node) {\n  let handler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n  let prevPosition = {\n    left: node.scrollLeft,\n    top: node.scrollTop\n  };\n  let rAF = 0;\n  (function loop() {\n    const position = {\n      left: node.scrollLeft,\n      top: node.scrollTop\n    };\n    const isHorizontalScroll = prevPosition.left !== position.left;\n    const isVerticalScroll = prevPosition.top !== position.top;\n    if (isHorizontalScroll || isVerticalScroll) handler();\n    prevPosition = position;\n    rAF = window.requestAnimationFrame(loop);\n  })();\n  return () => window.cancelAnimationFrame(rAF);\n};\nfunction useDebounceCallback(callback, delay) {\n  const handleCallback = useCallbackRef(callback);\n  const debounceTimerRef = React2.useRef(0);\n  React2.useEffect(() => () => window.clearTimeout(debounceTimerRef.current), []);\n  return React2.useCallback(() => {\n    window.clearTimeout(debounceTimerRef.current);\n    debounceTimerRef.current = window.setTimeout(handleCallback, delay);\n  }, [handleCallback, delay]);\n}\nfunction useResizeObserver(element, onResize) {\n  const handleResize = useCallbackRef(onResize);\n  useLayoutEffect(() => {\n    let rAF = 0;\n    if (element) {\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\nvar Root = ScrollArea;\nvar Viewport = ScrollAreaViewport;\nvar Scrollbar = ScrollAreaScrollbar;\nvar Thumb = ScrollAreaThumb;\nvar Corner = ScrollAreaCorner;\nexport { Corner, Root, ScrollArea, ScrollAreaCorner, ScrollAreaScrollbar, ScrollAreaThumb, ScrollAreaViewport, Scrollbar, Thumb, Viewport, createScrollAreaScope };","map":{"version":3,"names":["React2","Primitive","Presence","createContextScope","useComposedRefs","useCallbackRef","useDirection","useLayoutEffect","clamp","composeEventHandlers","React","useStateMachine","initialState","machine","useReducer","state","event","nextState","Fragment","jsx","jsxs","SCROLL_AREA_NAME","createScrollAreaContext","createScrollAreaScope","ScrollAreaProvider","useScrollAreaContext","ScrollArea","forwardRef","props","forwardedRef","__scopeScrollArea","type","dir","scrollHideDelay","scrollAreaProps","_objectWithoutProperties","_excluded","scrollArea","setScrollArea","useState","viewport","setViewport","content","setContent","scrollbarX","setScrollbarX","scrollbarY","setScrollbarY","cornerWidth","setCornerWidth","cornerHeight","setCornerHeight","scrollbarXEnabled","setScrollbarXEnabled","scrollbarYEnabled","setScrollbarYEnabled","composedRefs","node","direction","scope","onViewportChange","onContentChange","onScrollbarXChange","onScrollbarXEnabledChange","onScrollbarYChange","onScrollbarYEnabledChange","onCornerWidthChange","onCornerHeightChange","children","div","_objectSpread","ref","style","position","displayName","VIEWPORT_NAME","ScrollAreaViewport","nonce","viewportProps","_excluded2","context","useRef","dangerouslySetInnerHTML","__html","overflowX","overflowY","minWidth","display","SCROLLBAR_NAME","ScrollAreaScrollbar","forceMount","scrollbarProps","_excluded3","isHorizontal","orientation","useEffect","ScrollAreaScrollbarHover","ScrollAreaScrollbarScroll","ScrollAreaScrollbarAuto","ScrollAreaScrollbarVisible","_excluded4","visible","setVisible","hideTimer","handlePointerEnter","window","clearTimeout","handlePointerLeave","setTimeout","addEventListener","removeEventListener","present","_excluded5","debounceScrollEnd","useDebounceCallback","send","hidden","SCROLL","scrolling","SCROLL_END","POINTER_ENTER","interacting","POINTER_LEAVE","idle","HIDE","scrollDirection","prevScrollPos","handleScroll","scrollPos","hasScrollInDirectionChanged","onPointerEnter","onPointerLeave","_excluded6","handleResize","isOverflowX","offsetWidth","scrollWidth","isOverflowY","offsetHeight","scrollHeight","useResizeObserver","_excluded7","thumbRef","pointerOffsetRef","sizes","setSizes","scrollbar","size","paddingStart","paddingEnd","thumbRatio","getThumbRatio","commonProps","onSizesChange","hasThumb","Boolean","onThumbChange","thumb","current","onThumbPointerUp","onThumbPointerDown","pointerPos","getScrollPosition","getScrollPositionFromPointer","ScrollAreaScrollbarX","onThumbPositionChange","scrollLeft","offset","getThumbOffsetFromScroll","transform","concat","onWheelScroll","onDragScroll","ScrollAreaScrollbarY","scrollTop","_excluded8","computedStyle","setComputedStyle","composeRefs","getComputedStyle","ScrollAreaScrollbarImpl","bottom","left","right","getThumbSize","x","maxScrollPos","deltaX","isScrollingWithinScrollbarBounds","preventDefault","onResize","clientWidth","toInt","paddingLeft","paddingRight","_excluded9","top","y","deltaY","clientHeight","paddingTop","paddingBottom","ScrollbarProvider","useScrollbarContext","_excluded0","setScrollbar","rectRef","prevWebkitUserSelectRef","handleWheelScroll","handleThumbPositionChange","handleDragScroll","clientX","clientY","handleWheel","element","target","isScrollbarWheel","contains","document","passive","onPointerDown","mainPointer","button","setPointerCapture","pointerId","getBoundingClientRect","body","webkitUserSelect","scrollBehavior","onPointerMove","onPointerUp","hasPointerCapture","releasePointerCapture","THUMB_NAME","ScrollAreaThumb","thumbProps","_excluded1","scrollbarContext","ScrollAreaThumbImpl","_excluded10","scrollAreaContext","composedRef","removeUnlinkedScrollListenerRef","listener","addUnlinkedScrollListener","width","height","onPointerDownCapture","thumbRect","CORNER_NAME","ScrollAreaCorner","hasBothScrollbarsVisible","hasCorner","ScrollAreaCornerImpl","cornerProps","_excluded11","setWidth","setHeight","hasSize","_context$scrollbarX","height2","_context$scrollbarY","width2","value","parseInt","viewportSize","contentSize","ratio","isNaN","scrollbarPadding","thumbSize","Math","max","pointerOffset","arguments","length","undefined","thumbSizePx","thumbCenter","thumbOffsetFromEnd","minPointerPos","maxPointerPos","scrollRange","interpolate","linearScale","maxThumbPos","scrollClampRange","scrollWithoutMomentum","input","output","handler","prevPosition","rAF","loop","isHorizontalScroll","isVerticalScroll","requestAnimationFrame","cancelAnimationFrame","callback","delay","handleCallback","debounceTimerRef","useCallback","resizeObserver","ResizeObserver","observe","unobserve","Root","Viewport","Scrollbar","Thumb","Corner"],"sources":["C:\\Users\\ashwi\\OneDrive\\Desktop\\LightRiver UI\\node_modules\\@radix-ui\\react-scroll-area\\src\\scroll-area.tsx","C:\\Users\\ashwi\\OneDrive\\Desktop\\LightRiver UI\\node_modules\\@radix-ui\\react-scroll-area\\src\\use-state-machine.ts"],"sourcesContent":["import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { clamp } from '@radix-ui/number';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useStateMachine } from './use-state-machine';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\ntype Sizes = {\n  content: number;\n  viewport: number;\n  scrollbar: {\n    size: number;\n    paddingStart: number;\n    paddingEnd: number;\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollArea\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_AREA_NAME = 'ScrollArea';\n\ntype ScopedProps<P> = P & { __scopeScrollArea?: Scope };\nconst [createScrollAreaContext, createScrollAreaScope] = createContextScope(SCROLL_AREA_NAME);\n\ntype ScrollAreaContextValue = {\n  type: 'auto' | 'always' | 'scroll' | 'hover';\n  dir: Direction;\n  scrollHideDelay: number;\n  scrollArea: ScrollAreaElement | null;\n  viewport: ScrollAreaViewportElement | null;\n  onViewportChange(viewport: ScrollAreaViewportElement | null): void;\n  content: HTMLDivElement | null;\n  onContentChange(content: HTMLDivElement): void;\n  scrollbarX: ScrollAreaScrollbarElement | null;\n  onScrollbarXChange(scrollbar: ScrollAreaScrollbarElement | null): void;\n  scrollbarXEnabled: boolean;\n  onScrollbarXEnabledChange(rendered: boolean): void;\n  scrollbarY: ScrollAreaScrollbarElement | null;\n  onScrollbarYChange(scrollbar: ScrollAreaScrollbarElement | null): void;\n  scrollbarYEnabled: boolean;\n  onScrollbarYEnabledChange(rendered: boolean): void;\n  onCornerWidthChange(width: number): void;\n  onCornerHeightChange(height: number): void;\n};\n\nconst [ScrollAreaProvider, useScrollAreaContext] =\n  createScrollAreaContext<ScrollAreaContextValue>(SCROLL_AREA_NAME);\n\ntype ScrollAreaElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ScrollAreaProps extends PrimitiveDivProps {\n  type?: ScrollAreaContextValue['type'];\n  dir?: ScrollAreaContextValue['dir'];\n  scrollHideDelay?: number;\n}\n\nconst ScrollArea = React.forwardRef<ScrollAreaElement, ScrollAreaProps>(\n  (props: ScopedProps<ScrollAreaProps>, forwardedRef) => {\n    const {\n      __scopeScrollArea,\n      type = 'hover',\n      dir,\n      scrollHideDelay = 600,\n      ...scrollAreaProps\n    } = props;\n    const [scrollArea, setScrollArea] = React.useState<ScrollAreaElement | null>(null);\n    const [viewport, setViewport] = React.useState<ScrollAreaViewportElement | null>(null);\n    const [content, setContent] = React.useState<HTMLDivElement | null>(null);\n    const [scrollbarX, setScrollbarX] = React.useState<ScrollAreaScrollbarElement | null>(null);\n    const [scrollbarY, setScrollbarY] = React.useState<ScrollAreaScrollbarElement | null>(null);\n    const [cornerWidth, setCornerWidth] = React.useState(0);\n    const [cornerHeight, setCornerHeight] = React.useState(0);\n    const [scrollbarXEnabled, setScrollbarXEnabled] = React.useState(false);\n    const [scrollbarYEnabled, setScrollbarYEnabled] = React.useState(false);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setScrollArea(node));\n    const direction = useDirection(dir);\n\n    return (\n      <ScrollAreaProvider\n        scope={__scopeScrollArea}\n        type={type}\n        dir={direction}\n        scrollHideDelay={scrollHideDelay}\n        scrollArea={scrollArea}\n        viewport={viewport}\n        onViewportChange={setViewport}\n        content={content}\n        onContentChange={setContent}\n        scrollbarX={scrollbarX}\n        onScrollbarXChange={setScrollbarX}\n        scrollbarXEnabled={scrollbarXEnabled}\n        onScrollbarXEnabledChange={setScrollbarXEnabled}\n        scrollbarY={scrollbarY}\n        onScrollbarYChange={setScrollbarY}\n        scrollbarYEnabled={scrollbarYEnabled}\n        onScrollbarYEnabledChange={setScrollbarYEnabled}\n        onCornerWidthChange={setCornerWidth}\n        onCornerHeightChange={setCornerHeight}\n      >\n        <Primitive.div\n          dir={direction}\n          {...scrollAreaProps}\n          ref={composedRefs}\n          style={{\n            position: 'relative',\n            // Pass corner sizes as CSS vars to reduce re-renders of context consumers\n            ['--radix-scroll-area-corner-width' as any]: cornerWidth + 'px',\n            ['--radix-scroll-area-corner-height' as any]: cornerHeight + 'px',\n            ...props.style,\n          }}\n        />\n      </ScrollAreaProvider>\n    );\n  }\n);\n\nScrollArea.displayName = SCROLL_AREA_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst VIEWPORT_NAME = 'ScrollAreaViewport';\n\ntype ScrollAreaViewportElement = React.ComponentRef<typeof Primitive.div>;\ninterface ScrollAreaViewportProps extends PrimitiveDivProps {\n  nonce?: string;\n}\n\nconst ScrollAreaViewport = React.forwardRef<ScrollAreaViewportElement, ScrollAreaViewportProps>(\n  (props: ScopedProps<ScrollAreaViewportProps>, forwardedRef) => {\n    const { __scopeScrollArea, children, nonce, ...viewportProps } = props;\n    const context = useScrollAreaContext(VIEWPORT_NAME, __scopeScrollArea);\n    const ref = React.useRef<ScrollAreaViewportElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);\n    return (\n      <>\n        {/* Hide scrollbars cross-browser and enable momentum scroll for touch devices */}\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}`,\n          }}\n          nonce={nonce}\n        />\n        <Primitive.div\n          data-radix-scroll-area-viewport=\"\"\n          {...viewportProps}\n          ref={composedRefs}\n          style={{\n            /**\n             * We don't support `visible` because the intention is to have at least one scrollbar\n             * if this component is used and `visible` will behave like `auto` in that case\n             * https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#description\n             *\n             * We don't handle `auto` because the intention is for the native implementation\n             * to be hidden if using this component. We just want to ensure the node is scrollable\n             * so could have used either `scroll` or `auto` here. We picked `scroll` to prevent\n             * the browser from having to work out whether to render native scrollbars or not,\n             * we tell it to with the intention of hiding them in CSS.\n             */\n            overflowX: context.scrollbarXEnabled ? 'scroll' : 'hidden',\n            overflowY: context.scrollbarYEnabled ? 'scroll' : 'hidden',\n            ...props.style,\n          }}\n        >\n          {/**\n           * `display: table` ensures our content div will match the size of its children in both\n           * horizontal and vertical axis so we can determine if scroll width/height changed and\n           * recalculate thumb sizes. This doesn't account for children with *percentage*\n           * widths that change. We'll wait to see what use-cases consumers come up with there\n           * before trying to resolve it.\n           */}\n          <div ref={context.onContentChange} style={{ minWidth: '100%', display: 'table' }}>\n            {children}\n          </div>\n        </Primitive.div>\n      </>\n    );\n  }\n);\n\nScrollAreaViewport.displayName = VIEWPORT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaScrollbar\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLLBAR_NAME = 'ScrollAreaScrollbar';\n\ntype ScrollAreaScrollbarElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbar = React.forwardRef<ScrollAreaScrollbarElement, ScrollAreaScrollbarProps>(\n  (props: ScopedProps<ScrollAreaScrollbarProps>, forwardedRef) => {\n    const { forceMount, ...scrollbarProps } = props;\n    const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n    const { onScrollbarXEnabledChange, onScrollbarYEnabledChange } = context;\n    const isHorizontal = props.orientation === 'horizontal';\n\n    React.useEffect(() => {\n      isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);\n      return () => {\n        isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);\n      };\n    }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);\n\n    return context.type === 'hover' ? (\n      <ScrollAreaScrollbarHover {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'scroll' ? (\n      <ScrollAreaScrollbarScroll {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'auto' ? (\n      <ScrollAreaScrollbarAuto {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'always' ? (\n      <ScrollAreaScrollbarVisible {...scrollbarProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nScrollAreaScrollbar.displayName = SCROLLBAR_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarHoverElement = ScrollAreaScrollbarAutoElement;\ninterface ScrollAreaScrollbarHoverProps extends ScrollAreaScrollbarAutoProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarHover = React.forwardRef<\n  ScrollAreaScrollbarHoverElement,\n  ScrollAreaScrollbarHoverProps\n>((props: ScopedProps<ScrollAreaScrollbarHoverProps>, forwardedRef) => {\n  const { forceMount, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [visible, setVisible] = React.useState(false);\n\n  React.useEffect(() => {\n    const scrollArea = context.scrollArea;\n    let hideTimer = 0;\n    if (scrollArea) {\n      const handlePointerEnter = () => {\n        window.clearTimeout(hideTimer);\n        setVisible(true);\n      };\n      const handlePointerLeave = () => {\n        hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);\n      };\n      scrollArea.addEventListener('pointerenter', handlePointerEnter);\n      scrollArea.addEventListener('pointerleave', handlePointerLeave);\n      return () => {\n        window.clearTimeout(hideTimer);\n        scrollArea.removeEventListener('pointerenter', handlePointerEnter);\n        scrollArea.removeEventListener('pointerleave', handlePointerLeave);\n      };\n    }\n  }, [context.scrollArea, context.scrollHideDelay]);\n\n  return (\n    <Presence present={forceMount || visible}>\n      <ScrollAreaScrollbarAuto\n        data-state={visible ? 'visible' : 'hidden'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n      />\n    </Presence>\n  );\n});\n\ntype ScrollAreaScrollbarScrollElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarScrollProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarScroll = React.forwardRef<\n  ScrollAreaScrollbarScrollElement,\n  ScrollAreaScrollbarScrollProps\n>((props: ScopedProps<ScrollAreaScrollbarScrollProps>, forwardedRef) => {\n  const { forceMount, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const isHorizontal = props.orientation === 'horizontal';\n  const debounceScrollEnd = useDebounceCallback(() => send('SCROLL_END'), 100);\n  const [state, send] = useStateMachine('hidden', {\n    hidden: {\n      SCROLL: 'scrolling',\n    },\n    scrolling: {\n      SCROLL_END: 'idle',\n      POINTER_ENTER: 'interacting',\n    },\n    interacting: {\n      SCROLL: 'interacting',\n      POINTER_LEAVE: 'idle',\n    },\n    idle: {\n      HIDE: 'hidden',\n      SCROLL: 'scrolling',\n      POINTER_ENTER: 'interacting',\n    },\n  });\n\n  React.useEffect(() => {\n    if (state === 'idle') {\n      const hideTimer = window.setTimeout(() => send('HIDE'), context.scrollHideDelay);\n      return () => window.clearTimeout(hideTimer);\n    }\n  }, [state, context.scrollHideDelay, send]);\n\n  React.useEffect(() => {\n    const viewport = context.viewport;\n    const scrollDirection = isHorizontal ? 'scrollLeft' : 'scrollTop';\n\n    if (viewport) {\n      let prevScrollPos = viewport[scrollDirection];\n      const handleScroll = () => {\n        const scrollPos = viewport[scrollDirection];\n        const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;\n        if (hasScrollInDirectionChanged) {\n          send('SCROLL');\n          debounceScrollEnd();\n        }\n        prevScrollPos = scrollPos;\n      };\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [context.viewport, isHorizontal, send, debounceScrollEnd]);\n\n  return (\n    <Presence present={forceMount || state !== 'hidden'}>\n      <ScrollAreaScrollbarVisible\n        data-state={state === 'hidden' ? 'hidden' : 'visible'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n        onPointerEnter={composeEventHandlers(props.onPointerEnter, () => send('POINTER_ENTER'))}\n        onPointerLeave={composeEventHandlers(props.onPointerLeave, () => send('POINTER_LEAVE'))}\n      />\n    </Presence>\n  );\n});\n\ntype ScrollAreaScrollbarAutoElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarAutoProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarAuto = React.forwardRef<\n  ScrollAreaScrollbarAutoElement,\n  ScrollAreaScrollbarAutoProps\n>((props: ScopedProps<ScrollAreaScrollbarAutoProps>, forwardedRef) => {\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const { forceMount, ...scrollbarProps } = props;\n  const [visible, setVisible] = React.useState(false);\n  const isHorizontal = props.orientation === 'horizontal';\n  const handleResize = useDebounceCallback(() => {\n    if (context.viewport) {\n      const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;\n      const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;\n      setVisible(isHorizontal ? isOverflowX : isOverflowY);\n    }\n  }, 10);\n\n  useResizeObserver(context.viewport, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <Presence present={forceMount || visible}>\n      <ScrollAreaScrollbarVisible\n        data-state={visible ? 'visible' : 'hidden'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n      />\n    </Presence>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarVisibleElement = ScrollAreaScrollbarAxisElement;\ninterface ScrollAreaScrollbarVisibleProps\n  extends Omit<ScrollAreaScrollbarAxisProps, keyof ScrollAreaScrollbarAxisPrivateProps> {\n  orientation?: 'horizontal' | 'vertical';\n}\n\nconst ScrollAreaScrollbarVisible = React.forwardRef<\n  ScrollAreaScrollbarVisibleElement,\n  ScrollAreaScrollbarVisibleProps\n>((props: ScopedProps<ScrollAreaScrollbarVisibleProps>, forwardedRef) => {\n  const { orientation = 'vertical', ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const thumbRef = React.useRef<ScrollAreaThumbElement | null>(null);\n  const pointerOffsetRef = React.useRef(0);\n  const [sizes, setSizes] = React.useState<Sizes>({\n    content: 0,\n    viewport: 0,\n    scrollbar: { size: 0, paddingStart: 0, paddingEnd: 0 },\n  });\n  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);\n\n  type UncommonProps = 'onThumbPositionChange' | 'onDragScroll' | 'onWheelScroll';\n  const commonProps: Omit<ScrollAreaScrollbarAxisPrivateProps, UncommonProps> = {\n    ...scrollbarProps,\n    sizes,\n    onSizesChange: setSizes,\n    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),\n    onThumbChange: (thumb) => (thumbRef.current = thumb),\n    onThumbPointerUp: () => (pointerOffsetRef.current = 0),\n    onThumbPointerDown: (pointerPos) => (pointerOffsetRef.current = pointerPos),\n  };\n\n  function getScrollPosition(pointerPos: number, dir?: Direction) {\n    return getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, dir);\n  }\n\n  if (orientation === 'horizontal') {\n    return (\n      <ScrollAreaScrollbarX\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollLeft;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes, context.dir);\n            thumbRef.current.style.transform = `translate3d(${offset}px, 0, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) context.viewport.scrollLeft = scrollPos;\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) {\n            context.viewport.scrollLeft = getScrollPosition(pointerPos, context.dir);\n          }\n        }}\n      />\n    );\n  }\n\n  if (orientation === 'vertical') {\n    return (\n      <ScrollAreaScrollbarY\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollTop;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes);\n            thumbRef.current.style.transform = `translate3d(0, ${offset}px, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) context.viewport.scrollTop = scrollPos;\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) context.viewport.scrollTop = getScrollPosition(pointerPos);\n        }}\n      />\n    );\n  }\n\n  return null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarAxisPrivateProps = {\n  hasThumb: boolean;\n  sizes: Sizes;\n  onSizesChange(sizes: Sizes): void;\n  onThumbChange(thumb: ScrollAreaThumbElement | null): void;\n  onThumbPointerDown(pointerPos: number): void;\n  onThumbPointerUp(): void;\n  onThumbPositionChange(): void;\n  onWheelScroll(scrollPos: number): void;\n  onDragScroll(pointerPos: number): void;\n};\n\ntype ScrollAreaScrollbarAxisElement = ScrollAreaScrollbarImplElement;\ninterface ScrollAreaScrollbarAxisProps\n  extends Omit<ScrollAreaScrollbarImplProps, keyof ScrollAreaScrollbarImplPrivateProps>,\n    ScrollAreaScrollbarAxisPrivateProps {}\n\nconst ScrollAreaScrollbarX = React.forwardRef<\n  ScrollAreaScrollbarAxisElement,\n  ScrollAreaScrollbarAxisProps\n>((props: ScopedProps<ScrollAreaScrollbarAxisProps>, forwardedRef) => {\n  const { sizes, onSizesChange, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const ref = React.useRef<ScrollAreaScrollbarAxisElement>(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarXChange);\n\n  React.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n\n  return (\n    <ScrollAreaScrollbarImpl\n      data-orientation=\"horizontal\"\n      {...scrollbarProps}\n      ref={composeRefs}\n      sizes={sizes}\n      style={{\n        bottom: 0,\n        left: context.dir === 'rtl' ? 'var(--radix-scroll-area-corner-width)' : 0,\n        right: context.dir === 'ltr' ? 'var(--radix-scroll-area-corner-width)' : 0,\n        ['--radix-scroll-area-thumb-width' as any]: getThumbSize(sizes) + 'px',\n        ...props.style,\n      }}\n      onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.x)}\n      onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.x)}\n      onWheelScroll={(event, maxScrollPos) => {\n        if (context.viewport) {\n          const scrollPos = context.viewport.scrollLeft + event.deltaX;\n          props.onWheelScroll(scrollPos);\n          // prevent window scroll when wheeling on scrollbar\n          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n            event.preventDefault();\n          }\n        }\n      }}\n      onResize={() => {\n        if (ref.current && context.viewport && computedStyle) {\n          onSizesChange({\n            content: context.viewport.scrollWidth,\n            viewport: context.viewport.offsetWidth,\n            scrollbar: {\n              size: ref.current.clientWidth,\n              paddingStart: toInt(computedStyle.paddingLeft),\n              paddingEnd: toInt(computedStyle.paddingRight),\n            },\n          });\n        }\n      }}\n    />\n  );\n});\n\nconst ScrollAreaScrollbarY = React.forwardRef<\n  ScrollAreaScrollbarAxisElement,\n  ScrollAreaScrollbarAxisProps\n>((props: ScopedProps<ScrollAreaScrollbarAxisProps>, forwardedRef) => {\n  const { sizes, onSizesChange, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const ref = React.useRef<ScrollAreaScrollbarAxisElement>(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarYChange);\n\n  React.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n\n  return (\n    <ScrollAreaScrollbarImpl\n      data-orientation=\"vertical\"\n      {...scrollbarProps}\n      ref={composeRefs}\n      sizes={sizes}\n      style={{\n        top: 0,\n        right: context.dir === 'ltr' ? 0 : undefined,\n        left: context.dir === 'rtl' ? 0 : undefined,\n        bottom: 'var(--radix-scroll-area-corner-height)',\n        ['--radix-scroll-area-thumb-height' as any]: getThumbSize(sizes) + 'px',\n        ...props.style,\n      }}\n      onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.y)}\n      onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.y)}\n      onWheelScroll={(event, maxScrollPos) => {\n        if (context.viewport) {\n          const scrollPos = context.viewport.scrollTop + event.deltaY;\n          props.onWheelScroll(scrollPos);\n          // prevent window scroll when wheeling on scrollbar\n          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n            event.preventDefault();\n          }\n        }\n      }}\n      onResize={() => {\n        if (ref.current && context.viewport && computedStyle) {\n          onSizesChange({\n            content: context.viewport.scrollHeight,\n            viewport: context.viewport.offsetHeight,\n            scrollbar: {\n              size: ref.current.clientHeight,\n              paddingStart: toInt(computedStyle.paddingTop),\n              paddingEnd: toInt(computedStyle.paddingBottom),\n            },\n          });\n        }\n      }}\n    />\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollbarContext = {\n  hasThumb: boolean;\n  scrollbar: ScrollAreaScrollbarElement | null;\n  onThumbChange(thumb: ScrollAreaThumbElement | null): void;\n  onThumbPointerUp(): void;\n  onThumbPointerDown(pointerPos: { x: number; y: number }): void;\n  onThumbPositionChange(): void;\n};\n\nconst [ScrollbarProvider, useScrollbarContext] =\n  createScrollAreaContext<ScrollbarContext>(SCROLLBAR_NAME);\n\ntype ScrollAreaScrollbarImplElement = React.ComponentRef<typeof Primitive.div>;\ntype ScrollAreaScrollbarImplPrivateProps = {\n  sizes: Sizes;\n  hasThumb: boolean;\n  onThumbChange: ScrollbarContext['onThumbChange'];\n  onThumbPointerUp: ScrollbarContext['onThumbPointerUp'];\n  onThumbPointerDown: ScrollbarContext['onThumbPointerDown'];\n  onThumbPositionChange: ScrollbarContext['onThumbPositionChange'];\n  onWheelScroll(event: WheelEvent, maxScrollPos: number): void;\n  onDragScroll(pointerPos: { x: number; y: number }): void;\n  onResize(): void;\n};\ninterface ScrollAreaScrollbarImplProps\n  extends Omit<PrimitiveDivProps, keyof ScrollAreaScrollbarImplPrivateProps>,\n    ScrollAreaScrollbarImplPrivateProps {}\n\nconst ScrollAreaScrollbarImpl = React.forwardRef<\n  ScrollAreaScrollbarImplElement,\n  ScrollAreaScrollbarImplProps\n>((props: ScopedProps<ScrollAreaScrollbarImplProps>, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    sizes,\n    hasThumb,\n    onThumbChange,\n    onThumbPointerUp,\n    onThumbPointerDown,\n    onThumbPositionChange,\n    onDragScroll,\n    onWheelScroll,\n    onResize,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, __scopeScrollArea);\n  const [scrollbar, setScrollbar] = React.useState<ScrollAreaScrollbarElement | null>(null);\n  const composeRefs = useComposedRefs(forwardedRef, (node) => setScrollbar(node));\n  const rectRef = React.useRef<DOMRect | null>(null);\n  const prevWebkitUserSelectRef = React.useRef<string>('');\n  const viewport = context.viewport;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = useCallbackRef(onWheelScroll);\n  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);\n  const handleResize = useDebounceCallback(onResize, 10);\n\n  function handleDragScroll(event: React.PointerEvent<HTMLElement>) {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({ x, y });\n    }\n  }\n\n  /**\n   * We bind wheel event imperatively so we can switch off passive\n   * mode for document wheel event to allow it to be prevented\n   */\n  React.useEffect(() => {\n    const handleWheel = (event: WheelEvent) => {\n      const element = event.target as HTMLElement;\n      const isScrollbarWheel = scrollbar?.contains(element);\n      if (isScrollbarWheel) handleWheelScroll(event, maxScrollPos);\n    };\n    document.addEventListener('wheel', handleWheel, { passive: false });\n    return () => document.removeEventListener('wheel', handleWheel, { passive: false } as any);\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n\n  /**\n   * Update thumb position on sizes change\n   */\n  React.useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n\n  useResizeObserver(scrollbar, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <ScrollbarProvider\n      scope={__scopeScrollArea}\n      scrollbar={scrollbar}\n      hasThumb={hasThumb}\n      onThumbChange={useCallbackRef(onThumbChange)}\n      onThumbPointerUp={useCallbackRef(onThumbPointerUp)}\n      onThumbPositionChange={handleThumbPositionChange}\n      onThumbPointerDown={useCallbackRef(onThumbPointerDown)}\n    >\n      <Primitive.div\n        {...scrollbarProps}\n        ref={composeRefs}\n        style={{ position: 'absolute', ...scrollbarProps.style }}\n        onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n          const mainPointer = 0;\n          if (event.button === mainPointer) {\n            const element = event.target as HTMLElement;\n            element.setPointerCapture(event.pointerId);\n            rectRef.current = scrollbar!.getBoundingClientRect();\n            // pointer capture doesn't prevent text selection in Safari\n            // so we remove text selection manually when scrolling\n            prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n            document.body.style.webkitUserSelect = 'none';\n            if (context.viewport) context.viewport.style.scrollBehavior = 'auto';\n            handleDragScroll(event);\n          }\n        })}\n        onPointerMove={composeEventHandlers(props.onPointerMove, handleDragScroll)}\n        onPointerUp={composeEventHandlers(props.onPointerUp, (event) => {\n          const element = event.target as HTMLElement;\n          if (element.hasPointerCapture(event.pointerId)) {\n            element.releasePointerCapture(event.pointerId);\n          }\n          document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n          if (context.viewport) context.viewport.style.scrollBehavior = '';\n          rectRef.current = null;\n        })}\n      />\n    </ScrollbarProvider>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaThumb\n * -----------------------------------------------------------------------------------------------*/\n\nconst THUMB_NAME = 'ScrollAreaThumb';\n\ntype ScrollAreaThumbElement = ScrollAreaThumbImplElement;\ninterface ScrollAreaThumbProps extends ScrollAreaThumbImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst ScrollAreaThumb = React.forwardRef<ScrollAreaThumbElement, ScrollAreaThumbProps>(\n  (props: ScopedProps<ScrollAreaThumbProps>, forwardedRef) => {\n    const { forceMount, ...thumbProps } = props;\n    const scrollbarContext = useScrollbarContext(THUMB_NAME, props.__scopeScrollArea);\n    return (\n      <Presence present={forceMount || scrollbarContext.hasThumb}>\n        <ScrollAreaThumbImpl ref={forwardedRef} {...thumbProps} />\n      </Presence>\n    );\n  }\n);\n\ntype ScrollAreaThumbImplElement = React.ComponentRef<typeof Primitive.div>;\ninterface ScrollAreaThumbImplProps extends PrimitiveDivProps {}\n\nconst ScrollAreaThumbImpl = React.forwardRef<ScrollAreaThumbImplElement, ScrollAreaThumbImplProps>(\n  (props: ScopedProps<ScrollAreaThumbImplProps>, forwardedRef) => {\n    const { __scopeScrollArea, style, ...thumbProps } = props;\n    const scrollAreaContext = useScrollAreaContext(THUMB_NAME, __scopeScrollArea);\n    const scrollbarContext = useScrollbarContext(THUMB_NAME, __scopeScrollArea);\n    const { onThumbPositionChange } = scrollbarContext;\n    const composedRef = useComposedRefs(forwardedRef, (node) =>\n      scrollbarContext.onThumbChange(node)\n    );\n    const removeUnlinkedScrollListenerRef = React.useRef<() => void>(undefined);\n    const debounceScrollEnd = useDebounceCallback(() => {\n      if (removeUnlinkedScrollListenerRef.current) {\n        removeUnlinkedScrollListenerRef.current();\n        removeUnlinkedScrollListenerRef.current = undefined;\n      }\n    }, 100);\n\n    React.useEffect(() => {\n      const viewport = scrollAreaContext.viewport;\n      if (viewport) {\n        /**\n         * We only bind to native scroll event so we know when scroll starts and ends.\n         * When scroll starts we start a requestAnimationFrame loop that checks for\n         * changes to scroll position. That rAF loop triggers our thumb position change\n         * when relevant to avoid scroll-linked effects. We cancel the loop when scroll ends.\n         * https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects\n         */\n        const handleScroll = () => {\n          debounceScrollEnd();\n          if (!removeUnlinkedScrollListenerRef.current) {\n            const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);\n            removeUnlinkedScrollListenerRef.current = listener;\n            onThumbPositionChange();\n          }\n        };\n        onThumbPositionChange();\n        viewport.addEventListener('scroll', handleScroll);\n        return () => viewport.removeEventListener('scroll', handleScroll);\n      }\n    }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);\n\n    return (\n      <Primitive.div\n        data-state={scrollbarContext.hasThumb ? 'visible' : 'hidden'}\n        {...thumbProps}\n        ref={composedRef}\n        style={{\n          width: 'var(--radix-scroll-area-thumb-width)',\n          height: 'var(--radix-scroll-area-thumb-height)',\n          ...style,\n        }}\n        onPointerDownCapture={composeEventHandlers(props.onPointerDownCapture, (event) => {\n          const thumb = event.target as HTMLElement;\n          const thumbRect = thumb.getBoundingClientRect();\n          const x = event.clientX - thumbRect.left;\n          const y = event.clientY - thumbRect.top;\n          scrollbarContext.onThumbPointerDown({ x, y });\n        })}\n        onPointerUp={composeEventHandlers(props.onPointerUp, scrollbarContext.onThumbPointerUp)}\n      />\n    );\n  }\n);\n\nScrollAreaThumb.displayName = THUMB_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaCorner\n * -----------------------------------------------------------------------------------------------*/\n\nconst CORNER_NAME = 'ScrollAreaCorner';\n\ntype ScrollAreaCornerElement = ScrollAreaCornerImplElement;\ninterface ScrollAreaCornerProps extends ScrollAreaCornerImplProps {}\n\nconst ScrollAreaCorner = React.forwardRef<ScrollAreaCornerElement, ScrollAreaCornerProps>(\n  (props: ScopedProps<ScrollAreaCornerProps>, forwardedRef) => {\n    const context = useScrollAreaContext(CORNER_NAME, props.__scopeScrollArea);\n    const hasBothScrollbarsVisible = Boolean(context.scrollbarX && context.scrollbarY);\n    const hasCorner = context.type !== 'scroll' && hasBothScrollbarsVisible;\n    return hasCorner ? <ScrollAreaCornerImpl {...props} ref={forwardedRef} /> : null;\n  }\n);\n\nScrollAreaCorner.displayName = CORNER_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaCornerImplElement = React.ComponentRef<typeof Primitive.div>;\ninterface ScrollAreaCornerImplProps extends PrimitiveDivProps {}\n\nconst ScrollAreaCornerImpl = React.forwardRef<\n  ScrollAreaCornerImplElement,\n  ScrollAreaCornerImplProps\n>((props: ScopedProps<ScrollAreaCornerImplProps>, forwardedRef) => {\n  const { __scopeScrollArea, ...cornerProps } = props;\n  const context = useScrollAreaContext(CORNER_NAME, __scopeScrollArea);\n  const [width, setWidth] = React.useState(0);\n  const [height, setHeight] = React.useState(0);\n  const hasSize = Boolean(width && height);\n\n  useResizeObserver(context.scrollbarX, () => {\n    const height = context.scrollbarX?.offsetHeight || 0;\n    context.onCornerHeightChange(height);\n    setHeight(height);\n  });\n\n  useResizeObserver(context.scrollbarY, () => {\n    const width = context.scrollbarY?.offsetWidth || 0;\n    context.onCornerWidthChange(width);\n    setWidth(width);\n  });\n\n  return hasSize ? (\n    <Primitive.div\n      {...cornerProps}\n      ref={forwardedRef}\n      style={{\n        width,\n        height,\n        position: 'absolute',\n        right: context.dir === 'ltr' ? 0 : undefined,\n        left: context.dir === 'rtl' ? 0 : undefined,\n        bottom: 0,\n        ...props.style,\n      }}\n    />\n  ) : null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction toInt(value?: string) {\n  return value ? parseInt(value, 10) : 0;\n}\n\nfunction getThumbRatio(viewportSize: number, contentSize: number) {\n  const ratio = viewportSize / contentSize;\n  return isNaN(ratio) ? 0 : ratio;\n}\n\nfunction getThumbSize(sizes: Sizes) {\n  const ratio = getThumbRatio(sizes.viewport, sizes.content);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const thumbSize = (sizes.scrollbar.size - scrollbarPadding) * ratio;\n  // minimum of 18 matches macOS minimum\n  return Math.max(thumbSize, 18);\n}\n\nfunction getScrollPositionFromPointer(\n  pointerPos: number,\n  pointerOffset: number,\n  sizes: Sizes,\n  dir: Direction = 'ltr'\n) {\n  const thumbSizePx = getThumbSize(sizes);\n  const thumbCenter = thumbSizePx / 2;\n  const offset = pointerOffset || thumbCenter;\n  const thumbOffsetFromEnd = thumbSizePx - offset;\n  const minPointerPos = sizes.scrollbar.paddingStart + offset;\n  const maxPointerPos = sizes.scrollbar.size - sizes.scrollbar.paddingEnd - thumbOffsetFromEnd;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const scrollRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange as [number, number]);\n  return interpolate(pointerPos);\n}\n\nfunction getThumbOffsetFromScroll(scrollPos: number, sizes: Sizes, dir: Direction = 'ltr') {\n  const thumbSizePx = getThumbSize(sizes);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const scrollbar = sizes.scrollbar.size - scrollbarPadding;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const maxThumbPos = scrollbar - thumbSizePx;\n  const scrollClampRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const scrollWithoutMomentum = clamp(scrollPos, scrollClampRange as [number, number]);\n  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);\n  return interpolate(scrollWithoutMomentum);\n}\n\n// https://github.com/tmcw-up-for-adoption/simple-linear-scale/blob/master/index.js\nfunction linearScale(input: readonly [number, number], output: readonly [number, number]) {\n  return (value: number) => {\n    if (input[0] === input[1] || output[0] === output[1]) return output[0];\n    const ratio = (output[1] - output[0]) / (input[1] - input[0]);\n    return output[0] + ratio * (value - input[0]);\n  };\n}\n\nfunction isScrollingWithinScrollbarBounds(scrollPos: number, maxScrollPos: number) {\n  return scrollPos > 0 && scrollPos < maxScrollPos;\n}\n\n// Custom scroll handler to avoid scroll-linked effects\n// https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects\nconst addUnlinkedScrollListener = (node: HTMLElement, handler = () => {}) => {\n  let prevPosition = { left: node.scrollLeft, top: node.scrollTop };\n  let rAF = 0;\n  (function loop() {\n    const position = { left: node.scrollLeft, top: node.scrollTop };\n    const isHorizontalScroll = prevPosition.left !== position.left;\n    const isVerticalScroll = prevPosition.top !== position.top;\n    if (isHorizontalScroll || isVerticalScroll) handler();\n    prevPosition = position;\n    rAF = window.requestAnimationFrame(loop);\n  })();\n  return () => window.cancelAnimationFrame(rAF);\n};\n\nfunction useDebounceCallback(callback: () => void, delay: number) {\n  const handleCallback = useCallbackRef(callback);\n  const debounceTimerRef = React.useRef(0);\n  React.useEffect(() => () => window.clearTimeout(debounceTimerRef.current), []);\n  return React.useCallback(() => {\n    window.clearTimeout(debounceTimerRef.current);\n    debounceTimerRef.current = window.setTimeout(handleCallback, delay);\n  }, [handleCallback, delay]);\n}\n\nfunction useResizeObserver(element: HTMLElement | null, onResize: () => void) {\n  const handleResize = useCallbackRef(onResize);\n  useLayoutEffect(() => {\n    let rAF = 0;\n    if (element) {\n      /**\n       * Resize Observer will throw an often benign error that says `ResizeObserver loop\n       * completed with undelivered notifications`. This means that ResizeObserver was not\n       * able to deliver all observations within a single animation frame, so we use\n       * `requestAnimationFrame` to ensure we don't deliver unnecessary observations.\n       * Further reading: https://github.com/WICG/resize-observer/issues/38\n       */\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = ScrollArea;\nconst Viewport = ScrollAreaViewport;\nconst Scrollbar = ScrollAreaScrollbar;\nconst Thumb = ScrollAreaThumb;\nconst Corner = ScrollAreaCorner;\n\nexport {\n  createScrollAreaScope,\n  //\n  ScrollArea,\n  ScrollAreaViewport,\n  ScrollAreaScrollbar,\n  ScrollAreaThumb,\n  ScrollAreaCorner,\n  //\n  Root,\n  Viewport,\n  Scrollbar,\n  Thumb,\n  Corner,\n};\nexport type {\n  ScrollAreaProps,\n  ScrollAreaViewportProps,\n  ScrollAreaScrollbarProps,\n  ScrollAreaThumbProps,\n  ScrollAreaCornerProps,\n};\n","import * as React from 'react';\n\ntype Machine<S> = { [k: string]: { [k: string]: S } };\ntype MachineState<T> = keyof T;\ntype MachineEvent<T> = keyof UnionToIntersection<T[keyof T]>;\n\n// 🤯 https://fettblog.eu/typescript-union-to-intersection/\ntype UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any\n  ? R\n  : never;\n\nexport function useStateMachine<M>(\n  initialState: MachineState<M>,\n  machine: M & Machine<MachineState<M>>\n) {\n  return React.useReducer((state: MachineState<M>, event: MachineEvent<M>): MachineState<M> => {\n    const nextState = (machine[state] as any)[event];\n    return nextState ?? state;\n  }, initialState);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}