{"ast":null,"code":"import{useState,useEffect}from'react';import{apiService}from'../services/api';import{v4 as uuidv4}from'uuid';export const useConversations=userId=>{const[conversations,setConversations]=useState([]);const[activeConversationId,setActiveConversationId]=useState();const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const activeConversation=conversations.find(c=>c.id===activeConversationId);useEffect(()=>{loadConversations();},[userId]);const loadConversations=async()=>{try{setLoading(true);const data=await apiService.getConversations(userId);setConversations(data);if(data.length>0&&!activeConversationId){setActiveConversationId(data[0].id);}}catch(err){setError('Failed to load conversations');console.error('Error loading conversations:',err);// For demo purposes, create a mock conversation\nsetConversations([]);}finally{setLoading(false);}};const createNewConversation=async title=>{try{const newTitle=title||\"New Conversation \".concat(new Date().toLocaleString());// For demo purposes, create locally without API call\nconst newConversation={id:uuidv4(),title:newTitle,messages:[],created_at:new Date(),updated_at:new Date()};setConversations(prev=>[newConversation,...prev]);setActiveConversationId(newConversation.id);return newConversation;}catch(err){setError('Failed to create conversation');console.error('Error creating conversation:',err);throw err;}};const updateConversation=updatedConversation=>{setConversations(prev=>prev.map(c=>c.id===updatedConversation.id?updatedConversation:c));};const selectConversation=conversationId=>{setActiveConversationId(conversationId);};const deleteConversation=conversationId=>{setConversations(prev=>prev.filter(c=>c.id!==conversationId));if(activeConversationId===conversationId){const remaining=conversations.filter(c=>c.id!==conversationId);setActiveConversationId(remaining.length>0?remaining[0].id:undefined);}};return{conversations,activeConversation,activeConversationId,loading,error,createNewConversation,updateConversation,selectConversation,deleteConversation,refreshConversations:loadConversations};};","map":{"version":3,"names":["useState","useEffect","apiService","v4","uuidv4","useConversations","userId","conversations","setConversations","activeConversationId","setActiveConversationId","loading","setLoading","error","setError","activeConversation","find","c","id","loadConversations","data","getConversations","length","err","console","createNewConversation","title","newTitle","concat","Date","toLocaleString","newConversation","messages","created_at","updated_at","prev","updateConversation","updatedConversation","map","selectConversation","conversationId","deleteConversation","filter","remaining","undefined","refreshConversations"],"sources":["C:/Users/ashwi/OneDrive/Desktop/LightRiver UI/src/hooks/useConversations.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Conversation } from '../types';\nimport { apiService } from '../services/api';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const useConversations = (userId: string) => {\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [activeConversationId, setActiveConversationId] = useState<string | undefined>();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const activeConversation = conversations.find(c => c.id === activeConversationId);\n\n  useEffect(() => {\n    loadConversations();\n  }, [userId]);\n\n  const loadConversations = async () => {\n    try {\n      setLoading(true);\n      const data = await apiService.getConversations(userId);\n      setConversations(data);\n      if (data.length > 0 && !activeConversationId) {\n        setActiveConversationId(data[0].id);\n      }\n    } catch (err) {\n      setError('Failed to load conversations');\n      console.error('Error loading conversations:', err);\n      // For demo purposes, create a mock conversation\n      setConversations([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createNewConversation = async (title?: string) => {\n    try {\n      const newTitle = title || `New Conversation ${new Date().toLocaleString()}`;\n      \n      // For demo purposes, create locally without API call\n      const newConversation: Conversation = {\n        id: uuidv4(),\n        title: newTitle,\n        messages: [],\n        created_at: new Date(),\n        updated_at: new Date(),\n      };\n\n      setConversations(prev => [newConversation, ...prev]);\n      setActiveConversationId(newConversation.id);\n      \n      return newConversation;\n    } catch (err) {\n      setError('Failed to create conversation');\n      console.error('Error creating conversation:', err);\n      throw err;\n    }\n  };\n\n  const updateConversation = (updatedConversation: Conversation) => {\n    setConversations(prev => \n      prev.map(c => \n        c.id === updatedConversation.id ? updatedConversation : c\n      )\n    );\n  };\n\n  const selectConversation = (conversationId: string) => {\n    setActiveConversationId(conversationId);\n  };\n\n  const deleteConversation = (conversationId: string) => {\n    setConversations(prev => prev.filter(c => c.id !== conversationId));\n    if (activeConversationId === conversationId) {\n      const remaining = conversations.filter(c => c.id !== conversationId);\n      setActiveConversationId(remaining.length > 0 ? remaining[0].id : undefined);\n    }\n  };\n\n  return {\n    conversations,\n    activeConversation,\n    activeConversationId,\n    loading,\n    error,\n    createNewConversation,\n    updateConversation,\n    selectConversation,\n    deleteConversation,\n    refreshConversations: loadConversations,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}