{"ast":null,"code":"\"use client\";\n\n// src/switch.tsx\nimport _objectSpread from \"C:/Users/ashwi/OneDrive/Desktop/LightRiver UI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/ashwi/OneDrive/Desktop/LightRiver UI/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"__scopeSwitch\", \"name\", \"checked\", \"defaultChecked\", \"required\", \"disabled\", \"value\", \"onCheckedChange\", \"form\"],\n  _excluded2 = [\"__scopeSwitch\"],\n  _excluded3 = [\"__scopeSwitch\", \"control\", \"checked\", \"bubbles\"];\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { usePrevious } from \"@radix-ui/react-use-previous\";\nimport { useSize } from \"@radix-ui/react-use-size\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar SWITCH_NAME = \"Switch\";\nvar [createSwitchContext, createSwitchScope] = createContextScope(SWITCH_NAME);\nvar [SwitchProvider, useSwitchContext] = createSwitchContext(SWITCH_NAME);\nvar Switch = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeSwitch,\n      name,\n      checked: checkedProp,\n      defaultChecked,\n      required,\n      disabled,\n      value = \"on\",\n      onCheckedChange,\n      form\n    } = props,\n    switchProps = _objectWithoutProperties(props, _excluded);\n  const [button, setButton] = React.useState(null);\n  const composedRefs = useComposedRefs(forwardedRef, node => setButton(node));\n  const hasConsumerStoppedPropagationRef = React.useRef(false);\n  const isFormControl = button ? form || !!button.closest(\"form\") : true;\n  const [checked, setChecked] = useControllableState({\n    prop: checkedProp,\n    defaultProp: defaultChecked !== null && defaultChecked !== void 0 ? defaultChecked : false,\n    onChange: onCheckedChange,\n    caller: SWITCH_NAME\n  });\n  return /* @__PURE__ */jsxs(SwitchProvider, {\n    scope: __scopeSwitch,\n    checked,\n    disabled,\n    children: [/* @__PURE__ */jsx(Primitive.button, _objectSpread(_objectSpread({\n      type: \"button\",\n      role: \"switch\",\n      \"aria-checked\": checked,\n      \"aria-required\": required,\n      \"data-state\": getState(checked),\n      \"data-disabled\": disabled ? \"\" : void 0,\n      disabled,\n      value\n    }, switchProps), {}, {\n      ref: composedRefs,\n      onClick: composeEventHandlers(props.onClick, event => {\n        setChecked(prevChecked => !prevChecked);\n        if (isFormControl) {\n          hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n          if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n        }\n      })\n    })), isFormControl && /* @__PURE__ */jsx(SwitchBubbleInput, {\n      control: button,\n      bubbles: !hasConsumerStoppedPropagationRef.current,\n      name,\n      value,\n      checked,\n      required,\n      disabled,\n      form,\n      style: {\n        transform: \"translateX(-100%)\"\n      }\n    })]\n  });\n});\nSwitch.displayName = SWITCH_NAME;\nvar THUMB_NAME = \"SwitchThumb\";\nvar SwitchThumb = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeSwitch\n    } = props,\n    thumbProps = _objectWithoutProperties(props, _excluded2);\n  const context = useSwitchContext(THUMB_NAME, __scopeSwitch);\n  return /* @__PURE__ */jsx(Primitive.span, _objectSpread(_objectSpread({\n    \"data-state\": getState(context.checked),\n    \"data-disabled\": context.disabled ? \"\" : void 0\n  }, thumbProps), {}, {\n    ref: forwardedRef\n  }));\n});\nSwitchThumb.displayName = THUMB_NAME;\nvar BUBBLE_INPUT_NAME = \"SwitchBubbleInput\";\nvar SwitchBubbleInput = React.forwardRef((_ref, forwardedRef) => {\n  let {\n      __scopeSwitch,\n      control,\n      checked,\n      bubbles = true\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded3);\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(ref, forwardedRef);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n  React.useEffect(() => {\n    const input = ref.current;\n    if (!input) return;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, \"checked\");\n    const setChecked = descriptor.set;\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event(\"click\", {\n        bubbles\n      });\n      setChecked.call(input, checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n  return /* @__PURE__ */jsx(\"input\", _objectSpread(_objectSpread({\n    type: \"checkbox\",\n    \"aria-hidden\": true,\n    defaultChecked: checked\n  }, props), {}, {\n    tabIndex: -1,\n    ref: composedRefs,\n    style: _objectSpread(_objectSpread(_objectSpread({}, props.style), controlSize), {}, {\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      opacity: 0,\n      margin: 0\n    })\n  }));\n});\nSwitchBubbleInput.displayName = BUBBLE_INPUT_NAME;\nfunction getState(checked) {\n  return checked ? \"checked\" : \"unchecked\";\n}\nvar Root = Switch;\nvar Thumb = SwitchThumb;\nexport { Root, Switch, SwitchThumb, Thumb, createSwitchScope };","map":{"version":3,"names":["React","composeEventHandlers","useComposedRefs","createContextScope","useControllableState","usePrevious","useSize","Primitive","jsx","jsxs","SWITCH_NAME","createSwitchContext","createSwitchScope","SwitchProvider","useSwitchContext","Switch","forwardRef","props","forwardedRef","__scopeSwitch","name","checked","checkedProp","defaultChecked","required","disabled","value","onCheckedChange","form","switchProps","_objectWithoutProperties","_excluded","button","setButton","useState","composedRefs","node","hasConsumerStoppedPropagationRef","useRef","isFormControl","closest","setChecked","prop","defaultProp","onChange","caller","scope","children","_objectSpread","type","role","getState","ref","onClick","event","prevChecked","current","isPropagationStopped","stopPropagation","SwitchBubbleInput","control","bubbles","style","transform","displayName","THUMB_NAME","SwitchThumb","thumbProps","_excluded2","context","span","BUBBLE_INPUT_NAME","_ref","_excluded3","controlSize","useEffect","input","inputProto","window","HTMLInputElement","prototype","descriptor","Object","getOwnPropertyDescriptor","set","Event","call","dispatchEvent","tabIndex","position","pointerEvents","opacity","margin","Root","Thumb"],"sources":["C:\\Users\\ashwi\\OneDrive\\Desktop\\LightRiver UI\\node_modules\\@radix-ui\\react-switch\\src\\switch.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Switch\n * -----------------------------------------------------------------------------------------------*/\n\nconst SWITCH_NAME = 'Switch';\n\ntype ScopedProps<P> = P & { __scopeSwitch?: Scope };\nconst [createSwitchContext, createSwitchScope] = createContextScope(SWITCH_NAME);\n\ntype SwitchContextValue = { checked: boolean; disabled?: boolean };\nconst [SwitchProvider, useSwitchContext] = createSwitchContext<SwitchContextValue>(SWITCH_NAME);\n\ntype SwitchElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface SwitchProps extends PrimitiveButtonProps {\n  checked?: boolean;\n  defaultChecked?: boolean;\n  required?: boolean;\n  onCheckedChange?(checked: boolean): void;\n}\n\nconst Switch = React.forwardRef<SwitchElement, SwitchProps>(\n  (props: ScopedProps<SwitchProps>, forwardedRef) => {\n    const {\n      __scopeSwitch,\n      name,\n      checked: checkedProp,\n      defaultChecked,\n      required,\n      disabled,\n      value = 'on',\n      onCheckedChange,\n      form,\n      ...switchProps\n    } = props;\n    const [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? form || !!button.closest('form') : true;\n    const [checked, setChecked] = useControllableState({\n      prop: checkedProp,\n      defaultProp: defaultChecked ?? false,\n      onChange: onCheckedChange,\n      caller: SWITCH_NAME,\n    });\n\n    return (\n      <SwitchProvider scope={__scopeSwitch} checked={checked} disabled={disabled}>\n        <Primitive.button\n          type=\"button\"\n          role=\"switch\"\n          aria-checked={checked}\n          aria-required={required}\n          data-state={getState(checked)}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          value={value}\n          {...switchProps}\n          ref={composedRefs}\n          onClick={composeEventHandlers(props.onClick, (event) => {\n            setChecked((prevChecked) => !prevChecked);\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              // if switch is in a form, stop propagation from the button so that we only propagate\n              // one click event (from the input). We propagate changes from an input so that native\n              // form validation works and form events reflect switch updates.\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })}\n        />\n        {isFormControl && (\n          <SwitchBubbleInput\n            control={button}\n            bubbles={!hasConsumerStoppedPropagationRef.current}\n            name={name}\n            value={value}\n            checked={checked}\n            required={required}\n            disabled={disabled}\n            form={form}\n            // We transform because the input is absolutely positioned but we have\n            // rendered it **after** the button. This pulls it back to sit on top\n            // of the button.\n            style={{ transform: 'translateX(-100%)' }}\n          />\n        )}\n      </SwitchProvider>\n    );\n  }\n);\n\nSwitch.displayName = SWITCH_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SwitchThumb\n * -----------------------------------------------------------------------------------------------*/\n\nconst THUMB_NAME = 'SwitchThumb';\n\ntype SwitchThumbElement = React.ComponentRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface SwitchThumbProps extends PrimitiveSpanProps {}\n\nconst SwitchThumb = React.forwardRef<SwitchThumbElement, SwitchThumbProps>(\n  (props: ScopedProps<SwitchThumbProps>, forwardedRef) => {\n    const { __scopeSwitch, ...thumbProps } = props;\n    const context = useSwitchContext(THUMB_NAME, __scopeSwitch);\n    return (\n      <Primitive.span\n        data-state={getState(context.checked)}\n        data-disabled={context.disabled ? '' : undefined}\n        {...thumbProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nSwitchThumb.displayName = THUMB_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SwitchBubbleInput\n * -----------------------------------------------------------------------------------------------*/\n\nconst BUBBLE_INPUT_NAME = 'SwitchBubbleInput';\n\ntype InputProps = React.ComponentPropsWithoutRef<typeof Primitive.input>;\ninterface SwitchBubbleInputProps extends Omit<InputProps, 'checked'> {\n  checked: boolean;\n  control: HTMLElement | null;\n  bubbles: boolean;\n}\n\nconst SwitchBubbleInput = React.forwardRef<HTMLInputElement, SwitchBubbleInputProps>(\n  (\n    {\n      __scopeSwitch,\n      control,\n      checked,\n      bubbles = true,\n      ...props\n    }: ScopedProps<SwitchBubbleInputProps>,\n    forwardedRef\n  ) => {\n    const ref = React.useRef<HTMLInputElement>(null);\n    const composedRefs = useComposedRefs(ref, forwardedRef);\n    const prevChecked = usePrevious(checked);\n    const controlSize = useSize(control);\n\n    // Bubble checked change to parents (e.g form change event)\n    React.useEffect(() => {\n      const input = ref.current;\n      if (!input) return;\n\n      const inputProto = window.HTMLInputElement.prototype;\n      const descriptor = Object.getOwnPropertyDescriptor(\n        inputProto,\n        'checked'\n      ) as PropertyDescriptor;\n      const setChecked = descriptor.set;\n      if (prevChecked !== checked && setChecked) {\n        const event = new Event('click', { bubbles });\n        setChecked.call(input, checked);\n        input.dispatchEvent(event);\n      }\n    }, [prevChecked, checked, bubbles]);\n\n    return (\n      <input\n        type=\"checkbox\"\n        aria-hidden\n        defaultChecked={checked}\n        {...props}\n        tabIndex={-1}\n        ref={composedRefs}\n        style={{\n          ...props.style,\n          ...controlSize,\n          position: 'absolute',\n          pointerEvents: 'none',\n          opacity: 0,\n          margin: 0,\n        }}\n      />\n    );\n  }\n);\n\nSwitchBubbleInput.displayName = BUBBLE_INPUT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(checked: boolean) {\n  return checked ? 'checked' : 'unchecked';\n}\n\nconst Root = Switch;\nconst Thumb = SwitchThumb;\n\nexport {\n  createSwitchScope,\n  //\n  Switch,\n  SwitchThumb,\n  //\n  Root,\n  Thumb,\n};\nexport type { SwitchProps, SwitchThumbProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}